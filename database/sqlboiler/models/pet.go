// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pet is an object representing the database table.
type Pet struct {
	ID       int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	Category null.Int `boil:"category" json:"category,omitempty" toml:"category" yaml:"category,omitempty"`

	R *petR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L petL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PetColumns = struct {
	ID       string
	Name     string
	Category string
}{
	ID:       "id",
	Name:     "name",
	Category: "category",
}

var PetTableColumns = struct {
	ID       string
	Name     string
	Category string
}{
	ID:       "pet.id",
	Name:     "pet.name",
	Category: "pet.category",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PetWhere = struct {
	ID       whereHelperint
	Name     whereHelperstring
	Category whereHelpernull_Int
}{
	ID:       whereHelperint{field: "\"pet\".\"id\""},
	Name:     whereHelperstring{field: "\"pet\".\"name\""},
	Category: whereHelpernull_Int{field: "\"pet\".\"category\""},
}

// PetRels is where relationship names are stored.
var PetRels = struct {
	PetCategory string
}{
	PetCategory: "PetCategory",
}

// petR is where relationships are stored.
type petR struct {
	PetCategory *Category `boil:"PetCategory" json:"PetCategory" toml:"PetCategory" yaml:"PetCategory"`
}

// NewStruct creates a new relationship struct
func (*petR) NewStruct() *petR {
	return &petR{}
}

func (r *petR) GetPetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.PetCategory
}

// petL is where Load methods for each relationship are stored.
type petL struct{}

var (
	petAllColumns            = []string{"id", "name", "category"}
	petColumnsWithoutDefault = []string{"name"}
	petColumnsWithDefault    = []string{"id", "category"}
	petPrimaryKeyColumns     = []string{"id"}
	petGeneratedColumns      = []string{}
)

type (
	// PetSlice is an alias for a slice of pointers to Pet.
	// This should almost always be used instead of []Pet.
	PetSlice []*Pet
	// PetHook is the signature for custom Pet hook methods
	PetHook func(context.Context, boil.ContextExecutor, *Pet) error

	petQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	petType                 = reflect.TypeOf(&Pet{})
	petMapping              = queries.MakeStructMapping(petType)
	petPrimaryKeyMapping, _ = queries.BindMapping(petType, petMapping, petPrimaryKeyColumns)
	petInsertCacheMut       sync.RWMutex
	petInsertCache          = make(map[string]insertCache)
	petUpdateCacheMut       sync.RWMutex
	petUpdateCache          = make(map[string]updateCache)
	petUpsertCacheMut       sync.RWMutex
	petUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var petAfterSelectMu sync.Mutex
var petAfterSelectHooks []PetHook

var petBeforeInsertMu sync.Mutex
var petBeforeInsertHooks []PetHook
var petAfterInsertMu sync.Mutex
var petAfterInsertHooks []PetHook

var petBeforeUpdateMu sync.Mutex
var petBeforeUpdateHooks []PetHook
var petAfterUpdateMu sync.Mutex
var petAfterUpdateHooks []PetHook

var petBeforeDeleteMu sync.Mutex
var petBeforeDeleteHooks []PetHook
var petAfterDeleteMu sync.Mutex
var petAfterDeleteHooks []PetHook

var petBeforeUpsertMu sync.Mutex
var petBeforeUpsertHooks []PetHook
var petAfterUpsertMu sync.Mutex
var petAfterUpsertHooks []PetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range petAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPetHook registers your hook function for all future operations.
func AddPetHook(hookPoint boil.HookPoint, petHook PetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		petAfterSelectMu.Lock()
		petAfterSelectHooks = append(petAfterSelectHooks, petHook)
		petAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		petBeforeInsertMu.Lock()
		petBeforeInsertHooks = append(petBeforeInsertHooks, petHook)
		petBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		petAfterInsertMu.Lock()
		petAfterInsertHooks = append(petAfterInsertHooks, petHook)
		petAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		petBeforeUpdateMu.Lock()
		petBeforeUpdateHooks = append(petBeforeUpdateHooks, petHook)
		petBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		petAfterUpdateMu.Lock()
		petAfterUpdateHooks = append(petAfterUpdateHooks, petHook)
		petAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		petBeforeDeleteMu.Lock()
		petBeforeDeleteHooks = append(petBeforeDeleteHooks, petHook)
		petBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		petAfterDeleteMu.Lock()
		petAfterDeleteHooks = append(petAfterDeleteHooks, petHook)
		petAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		petBeforeUpsertMu.Lock()
		petBeforeUpsertHooks = append(petBeforeUpsertHooks, petHook)
		petBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		petAfterUpsertMu.Lock()
		petAfterUpsertHooks = append(petAfterUpsertHooks, petHook)
		petAfterUpsertMu.Unlock()
	}
}

// One returns a single pet record from the query.
func (q petQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pet, error) {
	o := &Pet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pet")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pet records from the query.
func (q petQuery) All(ctx context.Context, exec boil.ContextExecutor) (PetSlice, error) {
	var o []*Pet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pet slice")
	}

	if len(petAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pet records in the query.
func (q petQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pet rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q petQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pet exists")
	}

	return count > 0, nil
}

// PetCategory pointed to by the foreign key.
func (o *Pet) PetCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Category),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadPetCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (petL) LoadPetCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybePet interface{}, mods queries.Applicator) error {
	var slice []*Pet
	var object *Pet

	if singular {
		var ok bool
		object, ok = maybePet.(*Pet)
		if !ok {
			object = new(Pet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePet))
			}
		}
	} else {
		s, ok := maybePet.(*[]*Pet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &petR{}
		}
		if !queries.IsNil(object.Category) {
			args[object.Category] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &petR{}
			}

			if !queries.IsNil(obj.Category) {
				args[obj.Category] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`category`),
		qm.WhereIn(`category.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PetCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Pets = append(foreign.R.Pets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Category, foreign.ID) {
				local.R.PetCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Pets = append(foreign.R.Pets, local)
				break
			}
		}
	}

	return nil
}

// SetPetCategory of the pet to the related item.
// Sets o.R.PetCategory to related.
// Adds o to related.R.Pets.
func (o *Pet) SetPetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category"}),
		strmangle.WhereClause("\"", "\"", 2, petPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Category, related.ID)
	if o.R == nil {
		o.R = &petR{
			PetCategory: related,
		}
	} else {
		o.R.PetCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Pets: PetSlice{o},
		}
	} else {
		related.R.Pets = append(related.R.Pets, o)
	}

	return nil
}

// RemovePetCategory relationship.
// Sets o.R.PetCategory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Pet) RemovePetCategory(ctx context.Context, exec boil.ContextExecutor, related *Category) error {
	var err error

	queries.SetScanner(&o.Category, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("category")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PetCategory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Pets {
		if queries.Equal(o.Category, ri.Category) {
			continue
		}

		ln := len(related.R.Pets)
		if ln > 1 && i < ln-1 {
			related.R.Pets[i] = related.R.Pets[ln-1]
		}
		related.R.Pets = related.R.Pets[:ln-1]
		break
	}
	return nil
}

// Pets retrieves all the records using an executor.
func Pets(mods ...qm.QueryMod) petQuery {
	mods = append(mods, qm.From("\"pet\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pet\".*"})
	}

	return petQuery{q}
}

// FindPet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Pet, error) {
	petObj := &Pet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pet\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, petObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pet")
	}

	if err = petObj.doAfterSelectHooks(ctx, exec); err != nil {
		return petObj, err
	}

	return petObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pet provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(petColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	petInsertCacheMut.RLock()
	cache, cached := petInsertCache[key]
	petInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			petAllColumns,
			petColumnsWithDefault,
			petColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(petType, petMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(petType, petMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pet\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pet\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pet")
	}

	if !cached {
		petInsertCacheMut.Lock()
		petInsertCache[key] = cache
		petInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	petUpdateCacheMut.RLock()
	cache, cached := petUpdateCache[key]
	petUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			petAllColumns,
			petPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pet, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pet\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, petPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(petType, petMapping, append(wl, petPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pet row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pet")
	}

	if !cached {
		petUpdateCacheMut.Lock()
		petUpdateCache[key] = cache
		petUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q petQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pet")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), petPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, petPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no pet provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(petColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	petUpsertCacheMut.RLock()
	cache, cached := petUpsertCache[key]
	petUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			petAllColumns,
			petColumnsWithDefault,
			petColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			petAllColumns,
			petPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pet, could not build update column list")
		}

		ret := strmangle.SetComplement(petAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(petPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert pet, could not build conflict column list")
			}

			conflict = make([]string, len(petPrimaryKeyColumns))
			copy(conflict, petPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pet\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(petType, petMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(petType, petMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pet")
	}

	if !cached {
		petUpsertCacheMut.Lock()
		petUpsertCache[key] = cache
		petUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Pet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), petPrimaryKeyMapping)
	sql := "DELETE FROM \"pet\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pet")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q petQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no petQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pet")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(petBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), petPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, petPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pet")
	}

	if len(petAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), petPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pet\".* FROM \"pet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, petPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PetSlice")
	}

	*o = slice

	return nil
}

// PetExists checks if the Pet row exists.
func PetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pet\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pet exists")
	}

	return exists, nil
}

// Exists checks if the Pet row exists.
func (o *Pet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PetExists(ctx, exec, o.ID)
}
